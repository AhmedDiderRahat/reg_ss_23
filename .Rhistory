x <- 1:4
x <- 1:4
y <- 6:9  # 6, 7, 8, 9
x+y
x > 2     # where, x is greater than 2
x >= 2    # where, x is greater than or equal to 2
y == 8    # where, y is 8
x / y     # vector divission
x <- c(TRUE, TRUE)
y <- c(TRUE, FALSE)
print(x & y)  # element-wise AND operation
print(x && y) # Logical AND
c(TRUE, TRUE) && c(TRUE, FALSE)
x <- read.table("Data/someData.txt")
load("Data/someData.txt")
rnorm(10)
rnorm(100)
print(rnorm(100))
print(i)
for (i in n){
print(i)
}
n = rnorm(100)
for (i in n){
print(i)
}
print(i, "a")
print(i + "a")
print(str(i) + "a")
print(paste0(i, ", a")
}
for (i in n){
print(paste0(i, ", a"))
n = rnorm(100)
for (i in n){
#print(str(i) + "a")
print(paste0(i, ", a"))
}
print(cat(i, ", a"))
n = rnorm(100)
for (i in n){
print(cat(i, ", a"))
}
print(i)
n = rnorm(100)
for (i in n){
print(i)
}
n
# Preparations
rm(list = ls(all.names = TRUE))
x <- 5:15
x
quantile(x, probs = 0.5)
quantile(x, probs = 0.1)
quantile(x, probs = c(0.1, 0.11))
# Quartiles
quantile(x)
# Deciles
quantile(x, probs = 1:9/10)
# Percentiles
quantile(x, prob = 1:99/100)
# BMI
bmi <- c(18.13, 18.53, 20.75, 21.86, 22.65, 22.93, 22.95, 23.75, 23.82, 24.01, 24.68, 24.89, 25.25,
25.75, 25.85, 25.9, 26.11, 26.73, 27.2, 27.67, 27.94, 28.19, 29.29, 31.22, 32.37)
boxplot(bmi)
(15.2*1.8)+32
(14.5*1.8)+32
# Preparations
rm(list = ls(all.names = TRUE))
x <- rnorm(n=10, mean=2, sd=10)
x
x <- rnorm(n=10, mean=50, sd=6)
x
# sample variance
sum((x - mean(x))^2) / (length(x)-1)
var(x)
# Population variance
var(x) / length(x) * (length(x) -1)
# Sample Standard deviation
sd(x)
# Coefficient of variance
sd(x) / mean(x)
# range
range(x)
# IQR
IQR(x)
# ECDF
data <- c(181, 174, 186, 172, 172, 186, 178, 182, 180, 196, 180, 173)
plot(ecdf(x), maiin = "ECDF (x)", col="red")
plot(ecdf(x), main = "ECDF (x)", col="red")
plot(ecdf(x), main = "ECDF (x)", col="red", warning())
plot(ecdf(sort(x)), main = "ECDF (x)", col="red")
# ECDF
data <- c(181, 174, 186, 172, 172, 186, 178, 182, 180, 196, 180, 173)
plot(ecdf(sort(data)), main = "ECDF (x)", col="red")
a <- c(1, 1.1, 1.2, 1.3, 1.4, 1.5)
mean(a)
var_a = (a-1.25)^2
var_a
var_a
var_a = sum((a-1.25)^2)
var_a
a <- c(1, 1.1, 1.2, 1.3, 1.4, 1.5)
mean(a)
var_a = sum((a-1.25)^2)
var_a
var_a = (a-1.25)^2)
var_a = (a-1.25)^2
var_a
var_a = mean((a-1.25)^2)
var_a
b = c(20, 22, 25, 28, 30, 35, 40)
mean(b)
var_b = mean((b-28.57)^2)
var_b
var_b = sum((b-28.57)^2) / (length(b) - 1)
var_b
dt1 <- c(185, 148, 172, 126, 197, 198, 121, 158, 153, 142)
dt_len <- length(dt1)
dt_len
dt_mean <- mean(dt1)
dt_mean
var(dt1)
var_dt1 <- sum((dt1 - dt_mean)) / (dt_len-1)
var_dt1
var_dt1 <- sum((dt1 - dt_mean)^2) / (dt_len-1)
var_dt1
std_dt1 <- sqrt(var_dt1)
std_dt1
cv(dt1)
cv_dt1 <- sd(dt1) / mean(dt1)
cv_dt1
median(dt1)
quantile(dt1, c(0.25, 0.50, 0.75))
#   Statistical Computing Lecture-05                                                                  #
#   Date: 14th Jan 2022                                                                               #
#######################################################################################################
# Preparations
rm(list = ls(all.names = TRUE))
library(dplyr)
library(dplyr)
library(InsectSprays)
require(InsectSprays)
data("InsectSprays")
print(InsectSprays[:5])
print(InsectSprays[,:5])
InsectSprays[:5]
InsectSprays[[, 5]]
InsectSprays[:, 5]
InsectSprays[5]
df <- data("InsectSprays")
df[5]
df[1]
df[[1]]
data("InsectSprays")
# Preparations
rm(list = ls(all.names = TRUE))
data("InsectSprays")
InsectSprays$count
InsectSprays$spray
tapply(InsectSprays$count, INDEX = InsectSprays$spray, mean)
tapply(InsectSprays$count, INDEX = InsectSprays$spray, sd)
boxplot(count ~ spray, data = InsectSprays,
xlab = 'Type of Spray',
ylab = 'Insect Counts',,
main = 'Insect Sprays data',
varwidth = TRUE,
col = 'lightgray')
boxplot(count ~ spray, data = InsectSprays,
xlab = "Type of Spray",
ylab = 'Insect Counts',
main = 'Insect Sprays data',
varwidth = TRUE,
col = 'lightgray')
boxplot(count ~ spray, data = InsectSprays,
xlab = 'Type of Spray',
ylab = 'Insect Counts',
main = 'Insect Sprays data',
varwidth = TRUE,
col = 'lightgray')
points(1:length(unique(InsectSprays$spray)),
tapply(InsectSprays$count, INDEX = InsectSprays$spray, mean),
pch = '*', col = 'red')
x <- c(-18.3, 17.0, 28.4, -14.3, 7.7)
y <- c(-17.6, -4.3, -4.7, -4.3, 15.7)
# covariacne
cov(x, y)
# correlations
cor(x, y)
cor(x, y, method = 'sprearman')
cor(x, y, method = 'spearman')
rank(x)
cor(rank(x), rank(y))
mean(c(10, 60, 70, 20, 30))
mean(c(20, 140, 130, 30, 60))
a <- c(10, 60, 70, 20, 30)
b <- c(20, 140, 130, 30, 60)
38 - a
(38 - a)ˆ2
a1 <- 38 - a
a1
a1ˆ2
a1^2
a2 <- a1^2
b1 <- 76 - b
b1
(b2 <- b21 ^ 2)
(b2 <- b1 ^ 2)
(a2 * b2)
mean(a)
sum((a - mean(a))^2) / (len(a)-1)
sum((a - mean(a))^2) / (length(a)-1)
sum((b - mean(b))^2) / (length(b)-1)
sd(a)
sqrt(a)
sqrt(670)
sqrt(3130)
sum(a2 * b2)
d1 <- sum(a2 * b2)
d1 / (25.89 * 55.95)
a1
b1
d1 <- a1*b1
d1
sum(d1)
5660 / (25.89*55.95)
25*55
a1
b1
(a1 <- (a - mean(a)))
(b1 <- (b - mean(b)))
b
a1 * b1
sum(a1 * b1)
a1
b1
(a1 <- (a - mean(a)))
90*.15
a
a1 <- mean(a) - a
a1
a
(a1 <- a - mean(a))
(b1 <- b - mean(b))
a1 * b1
sum(a1 * b1)
sd(a)
sd(b)
sd(b) * sd(a)
5660/4
1415 / (25.89*55.95)
267/5
# Preparations
rm(list = ls(all.names = TRUE))
# Paste: Convert any arguments to a character and concatenates them
x <- "Some"
paste(x, "String")
y <- paste(x, "String")
y
z <- c("Some", "More")
a <- paste(z, "String", sep = '_')
a
b <- paste("Some", "More", "String", sep = '_')
b
strsplit(y, split = ' ')
b1 <- strsplit(a, split = '_')
b1
b2 <- strsplit(b, split = '_')
b2
newLine <- "new\nLine"
print(newLine)
cat(newLine)
rep('new', 3)
class(rep('new', 3))
moreNewLines <- paste(rep('new', 3), 'line', sep = '\n')
moreNewLines
print(a)
grep('String', a)
c1 <- "Some_String More_String dider rahat_String"
c1 <- strsplit(c1, ' ')
c1[[1]]
grep('String', c1[[1]])
# if the string is not in the given list
grep('Rahat', a)
grep('rahat', a)
grep('Rahat', c1)
grep('rahat', c1)
grep('rahat', c1[[1]])
grep('Rahat', c1[[1]])
grep('rahat', c1[[1]])
c1
b2
sub('String', 'Somethings', a)
# Select only those columns in dat which start with “x’ ’
dat <- as.data.frame(matrix(1:100, nrow = 10))
dat
str(dat)
names(dat)[1:5] <- paste('x', 1:5, sep = '')
dat
str(dat)
# Preparations
rm(list = ls(all.names = TRUE))
getwd()
setwd
setwd('/Users/zeotaplaptop/Desktop/BHT-SS23/Regression/RegDS23/reg_ss_23')
getwd()
# Exercise 3
data <- read.csv("Dataset/AnscombeQuartet.csv")
# view first 6 rows
head(Anscombe)
# load dataset
data <- read.csv("Dataset/AnscombeQuartet.csv")
# view first 6 rows
head(data)
regmodel <- function(X, Y) {
lobj <- lm(Y ~ X)
print(summary(lobj)$r.squared)
plot(X, Y, pch="+")
abline(lobj, col="red")
}
regmodel(data$x1, data$y1)
regmodel(data$x2, data$y2)
regmodel(data$x3, data$y3)
regmodel(data$x4, data$y4)
par(mfrow=c(1,1))
regmodel <- function(X, Y) {
lobj <- lm(Y ~ X)
print(summary(lobj)$r.squared)
plot(X, Y, pch="+")
abline(lobj, col="red", lwd = 2)
}
par(mfrow=c(2,2))
regmodel(data$x1, data$y1)
regmodel(data$x2, data$y2)
regmodel(data$x3, data$y3)
regmodel(data$x4, data$y4)
par(mfrow=c(1,1))
regmodel <- function(X, Y) {
lobj <- lm(Y ~ X)
print(summary(lobj)$r.squared)
plot(X, Y, pch="+", x = 'joy', y = 'bangla')
abline(lobj, col="red", lwd = 2)
}
par(mfrow=c(2,2))
regmodel(data$x1, data$y1)
regmodel <- function(X, Y) {
lobj <- lm(Y ~ X)
print(summary(lobj)$r.squared)
plot(X, Y, pch="+", xlab = x_lab, ylab = y_lab)
abline(lobj, col="seagreen", lwd = 2)
}
par(mfrow=c(2,2))
regmodel(data$x1, data$y1, 'x1', ' y1')
regmodel <- function(X, Y, x_lab, y_lab) {
lobj <- lm(Y ~ X)
print(summary(lobj)$r.squared)
plot(X, Y, pch="+", xlab = x_lab, ylab = y_lab)
abline(lobj, col="seagreen", lwd = 2)
}
par(mfrow=c(2,2))
regmodel(data$x1, data$y1, 'x1', ' y1')
regmodel(data$x2, data$y2, 'x2', ' y2')
regmodel(data$x3, data$y3, 'x3', ' y3')
regmodel(data$x4, data$y4, 'x4', ' y4')
par(mfrow=c(1,1))
?dcsisq
?dchisq
## a chi^2 distribution arises from a sum of squared N(0,1) variables
df <- 20
nsim <- 50000
z <- matrix(rnorm(nsim*df), nsim, df)
y <- rowSums(z^2); length(y)  ## y is then chi^2 distributed
plot(fh <- density(y))
?dchisq
## approximate expectation by mean (expectation=0)
nsim <- 1000
t <- rt(nsim, df=df)
mean(t)
# Preparations
rm(list = ls(all.names = TRUE))
# load dataset
data <- read.csv("Dataset/AnscombeQuartet.csv")
# view first 6 rows
head(data)
regmodel <- function(X, Y, x_lab, y_lab) {
lobj <- lm(Y ~ X)
print(summary(lobj)$r.squared)
plot(X, Y, pch="+", xlab = x_lab, ylab = y_lab)
abline(lobj, col="seagreen", lwd = 2)
}
par(mfrow=c(2,2))
regmodel(data$x1, data$y1, 'x1', ' y1')
regmodel(data$x2, data$y2, 'x2', ' y2')
regmodel(data$x3, data$y3, 'x3', ' y3')
regmodel(data$x4, data$y4, 'x4', ' y4')
# Preparations
rm(list = ls(all.names = TRUE))
# load dataset
data <- read.csv("Dataset/AnscombeQuartet.csv")
# view first 6 rows
head(data)
regmodel <- function(X, Y, x_lab, y_lab) {
lobj <- lm(Y ~ X)
print(summary(lobj)$r.squared)
plot(X, Y, pch="+", xlab = x_lab, ylab = y_lab)
abline(lobj, col="seagreen", lwd = 2)
}
par(mfrow=c(2,2))
regmodel(data$x1, data$y1, 'x1', ' y1')
regmodel(data$x2, data$y2, 'x2', ' y2')
regmodel(data$x3, data$y3, 'x3', ' y3')
regmodel(data$x4, data$y4, 'x4', ' y4')
View(data)
# Preparations
rm(list = ls(all.names = TRUE))
# load dataset
data <- read.csv("Dataset/AnscombeQuartet.csv")
# view first 6 rows
head(data)
regmodel <- function(X, Y, x_lab, y_lab) {
# defining the linear model object
lobj <- lm(Y ~ X)
# print the r-squared
print(summary(lobj)$r.squared)
# plot the model
plot(X, Y, pch="+", xlab = x_lab, ylab = y_lab)
# draw the regression line
abline(lobj, col="seagreen", lwd = 2)
}
par(mfrow=c(2,2))
# call the function
regmodel(data$x1, data$y1, 'x1', ' y1')
regmodel(data$x2, data$y2, 'x2', ' y2')
regmodel(data$x3, data$y3, 'x3', ' y3')
regmodel(data$x4, data$y4, 'x4', ' y4')
par(mfrow=c(1,1))
