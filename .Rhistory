levels=c("success", "failure"))
## New and relabeled Levels
exam <- c(TRUE, TRUE, FALSE, TRUE, FALSE)
exam <- factor(exam,
levels=c(TRUE, FALSE),
levels=c("success", "failure"))
exam <- factor(exam,
levels=c(TRUE, FALSE),
labels=c("success", "failure"))
## New and relabeled Levels
exam <- c(TRUE, TRUE, FALSE, TRUE, FALSE)
exam <- factor(exam,
levels=c(TRUE, FALSE),
levels=c("success", "failure"))
exam <- factor(exam,
levels=c(TRUE, FALSE),
labels = c("success", "failure"))
print(exam)
table(exam)
## New and relabeled Levels
exam <- c(TRUE, TRUE, FALSE, TRUE, FALSE)
exam <- factor(exam,
levels=c(TRUE, FALSE),
labels = c("success", "failure"))\
exam <- factor(exam,
levels=c(TRUE, FALSE),
labels = c("success", "failure"))
print(exam)
table(exam)
x <- data.frame(eggs = 1:4, ham = c(TRUE, TRUE, FALSE, FALSE))
print(x)
print(nrow(x))
print(ncol(x)) # number of column
print(dim(x)) # total dimension
x <- data.frame(my_num = 1:4,
my_char = "a",
my_logic = c(TRUE, FALSE, FALSE, TRUE))
print(x)
str(x)
x <- list(1, "a", TRUE)
print(typeof(x))
print(x)
x <- list(1, 2, "a", TRUE)
print(typeof(x))
print(x)
x <- list(a = 1,
b = list(1, 2),
c = data.frame(x = 1:2))
print(x)
str(x)
x <- 5:15
x
# Preparations
rm(list = ls(all.names = TRUE))
x <- 5:15
x
quantile(x, probs = 0.5)
quantile(x, probs = 0.1)
quantile(x, probs = c(0.1, 0.11))
0.11*11
quantile(x)
# Deciles
quantile(x, probs = 1:9/10)
# Percentiles
quantile(x, prob = 1:99/100)
# BMI
bmi <- c(18.13, 18.53, 20.75, 21.86, 22.65, 22.93, 22.95, 23.75, 23.82, 24.01, 24.68, 24.89, 25.25,
25.75, 25.85, 25.9, 26.11, 26.73, 27.2, 27.67, 27.94, 28.19, 29.29, 31.22, 32.37)
boxplot(bmi)
prediction_fun <- function(X, Y, x_lab){
par(mfrow = c(2, 1))
# create an object of linear regression
lm_obj <- lm(Y ~ X)
y_hat <- predict(lm_obj)
print(summary(lm_obj))
plot(X, Y,
main = paste('Scatter plot of ', x_lab, ' and netrent'),
xlab = x_lab,
ylab = 'netrent')
abline(lm_obj, col = 'seagreen', lwd = 3)
e_hat <- (y_hat - netrent)
plot(y_hat, e_hat)
par(mfrow = c(1, 1))
return(list(y_hat = y_hat, e_hat = e_hat))
}
prediction_fun(X = living.space, Y = netrent, 'Living Space')
# Preparations
rm(list = ls(all.names = TRUE))
# load Munich rent data set
rent <- read.csv('Dataset/MunichRent2003.csv')
setwd
setwd('C:\\Users\\DELL\\Desktop\\Summer 2023\\RegDS23\\reg_ss_23')
# load Munich rent data set
rent <- read.csv('Dataset/MunichRent2003.csv')
# attached all columns
attach(rent)
prediction_fun <- function(X, Y, x_lab){
par(mfrow = c(2, 1))
# create an object of linear regression
lm_obj <- lm(Y ~ X)
y_hat <- predict(lm_obj)
print(summary(lm_obj))
plot(X, Y,
main = paste('Scatter plot of ', x_lab, ' and netrent'),
xlab = x_lab,
ylab = 'netrent')
abline(lm_obj, col = 'seagreen', lwd = 3)
e_hat <- (y_hat - netrent)
plot(y_hat, e_hat)
par(mfrow = c(1, 1))
return(list(y_hat = y_hat, e_hat = e_hat))
}
prediction_fun(X = living.space, Y = netrent, 'Living Space')
prediction_fun <- function(X, Y, x_lab){
par(mfrow = c(2, 1))
# create an object of linear regression
lm_obj <- lm(Y ~ X)
y_hat <- predict(lm_obj)
print(summary(lm_obj))
plot(X, Y,
main = paste('Scatter plot of ', x_lab, ' and netrent'),
xlab = x_lab,
ylab = 'netrent')
abline(lm_obj, col = 'seagreen', lwd = 3)
e_hat <- (y_hat - netrent)
plot(y_hat, e_hat)
par(mfrow = c(1, 1))
return(list(y_hat = y_hat, e_hat = e_hat))
}
prediction_fun(X = living.space, Y = netrent, 'Living Space')
prediction_fun(X = rooms, Y = netrent)
prediction_fun(X = rooms, Y = netrent, 'Number of Room')
prediction_fun(X = living.space, Y = netrent, 'Living Space')
reg_out <- prediction_fun(X = living.space, Y = netrent, 'Living Space')
proved_fun <- function(X, Y, X_lab){
reg_out <- prediction_fun(X = living.space, Y = netrent, 'Living Space')
Y_hat <- reg_out$y_hat
e_hat <- reg_out$e_hat
# calculate mean of Y
mean_Y <- mean(Y)
# calculate mean of Y_hat
mean_Y_hat <- mean(Y_hat)
# calculate mean of error term
mean_e_hat <- mean(e_hat)
}
a <- 4
b <- 6
print(paste0({a} + ' and '))
print(paste0(a + ' and '))
paste(a, ' and ', b, ' makes ', a+b)
proved_fun <- function(X, Y, X_lab){
reg_out <- prediction_fun(X = living.space, Y = netrent, 'Living Space')
Y_hat <- reg_out$y_hat
e_hat <- reg_out$e_hat
# calculate mean of Y
mean_Y <- mean(Y)
# calculate mean of Y_hat
mean_Y_hat <- mean(Y_hat)
# calculate mean of error term
mean_e_hat <- mean(e_hat)
paste('Mean of Y is: ', mean_Y, ' AND mean of y_hat is: ', mean_Y_hat)
}
proved_fun(X = living.space, Y = netrent, 'Living Space')
proved_fun <- function(X, Y, X_lab){
reg_out <- prediction_fun(X = living.space, Y = netrent, 'Living Space')
Y_hat <- reg_out$y_hat
e_hat <- reg_out$e_hat
# calculate mean of Y
mean_Y <- mean(Y)
# calculate mean of Y_hat
mean_Y_hat <- mean(Y_hat)
# calculate mean of error term
mean_e_hat <- mean(e_hat)
paste('\n\nThe output of the code: ')
paste('Mean of Y is: ', mean_Y, ' AND mean of y_hat is: ', mean_Y_hat)
paste('Mean of e_hat is: ', mean_e_hat)
}
proved_fun(X = living.space, Y = netrent, 'Living Space')
proved_fun <- function(X, Y, X_lab){
reg_out <- prediction_fun(X = living.space, Y = netrent, 'Living Space')
Y_hat <- reg_out$y_hat
e_hat <- reg_out$e_hat
# calculate mean of Y
mean_Y <- mean(Y)
# calculate mean of Y_hat
mean_Y_hat <- mean(Y_hat)
# calculate mean of error term
mean_e_hat <- mean(e_hat)
paste('\n\nThe output of the code: ',
'\nMean of Y is: ', mean_Y, ' AND mean of y_hat is: ', mean_Y_hat,
'\nMean of e_hat is: ', mean_e_hat)
}
proved_fun(X = living.space, Y = netrent, 'Living Space')
proved_fun <- function(X, Y, X_lab){
reg_out <- prediction_fun(X = living.space, Y = netrent, 'Living Space')
Y_hat <- reg_out$y_hat
e_hat <- reg_out$e_hat
# calculate mean of Y
mean_Y <- mean(Y)
# calculate mean of Y_hat
mean_Y_hat <- mean(Y_hat)
# calculate mean of error term
mean_e_hat <- mean(e_hat)
output <- paste('\n\nThe output of the code: ',
'\nMean of Y is: ', mean_Y, ' AND mean of y_hat is: ', mean_Y_hat,
'\nMean of e_hat is: ', mean_e_hat)
cat(output)
}
proved_fun(X = living.space, Y = netrent, 'Living Space')
proved_fun(X = living.space, Y = netrent, 'Living Space')
proved_fun <- function(X, Y, X_lab){
reg_out <- prediction_fun(X = living.space, Y = netrent, 'Living Space')
Y_hat <- reg_out$y_hat
e_hat <- reg_out$e_hat
# calculate mean of Y
mean_Y <- mean(Y)
# calculate mean of Y_hat
mean_Y_hat <- mean(Y_hat)
# calculate mean of error term
mean_e_hat <- mean(e_hat)
output <- paste('\n\nThe output of the code: ',
'\nMean of (Y) is: ', mean_Y, ' AND mean of (y_hat) is: ', mean_Y_hat,
'\nMean of (e_hat) is: ', mean_e_hat)
cat(output)
}
proved_fun(X = living.space, Y = netrent, 'Living Space')
X <- rnorm(n=500, mean = 0, sd = 1)
X
# set sample size n = 500
n = 500
set.seed(123)
X <- rnorm(n, mean = 0, sd = 1)
e <- rnorm(n, mean = 0, sd = sqrt(0.25))
# calculate Y
Y <- 1 + (2*X) + (X^2) + e
Y
# set three regression model
lm1 <- lm(y1_hat ~ X)                     # Simple linear regression
# set three regression model
lm1 <- lm(Y ~ X)                     # Simple linear regression
lm2 <- lm(Y ~ X + I(X^2))            # multiple (quadratic)
lm3 <- lm(Y ~ X + I(X^2) + I(X^3))   # multiple (cubic)
# plot the data
plot(X, Y)
# draw lm1
abline(lm1)
# draw lm1
abline(lm1, col = 'seagreen', lwd = 2)
# draw lm1
abline(lm1, col = 'seagreen', lwd = 3)
abline(lm2, col = 'darkblue', lwd = 3)
abline(lm3, col = 'darkorange2', lwd = 3)
curve(b.lm2[1] + b.lm2[2]*X +b.lm2[3]*X^2, col="blue", add=TRUE)
# plot the data
plot(X, Y)
# draw lm1
abline(lm1, col = 'seagreen', lwd = 3)
curve(b.lm2[1] + b.lm2[2]*X +b.lm2[3]*X^2, col="blue", add=TRUE)
curve(b2_hat.lm2[1] + b2_hat.lm2[2]*X +b2_hat.lm2[3]*X^2, col="blue", add=TRUE)
b2_hat <- coef(lm2)
curve(b2_hat.lm2[1] + b2_hat.lm2[2]*X +b2_hat.lm2[3]*X^2, col="blue", add=TRUE)
b2_hat <- coef(lm2)
curve(b2_hat.lm2[1] + b2_hat.lm2[2]*X +b2_hat.lm2[3]*X^2, col="blue", add=TRUE)
# plot the data
plot(X, Y)
# draw lm1
abline(lm1, col = 'seagreen', lwd = 3)
b2_hat <- coef(lm2)
b2_hat <- coef(lm2); b2_hat
b2_hat.lm2[1]
b2_hat[1]
curve(b2_hat[1] + b2_hat[2]*X +b2_hat[3]*X^2, col="blue", add=TRUE)
# plot the data
plot(X, Y)
# draw lm1
abline(lm1, col = 'seagreen', lwd = 3)
b2_hat <- coef(lm2); b2_hat
b2_hat[2]
b2_hat[2]
b2_hat[1]
b2_hat.lm2[1]
b_hat.lm2 <- coef(lm2); b2_hat
b2_hat.lm2[1]
b_hat.lm2 <- coef(lm2); b_hat.lm2
b_hat.lm2[1]
curve(b_hat.lm2[1] + b_hat.lm2[2]*X +b_hat.lm2[3]*X^2, col="blue", add=TRUE)
b_hat.lm2 <- coef(lm2); b_hat.lm2
b_hat.lm2[1]
# plot the data
plot(X, Y)
# draw lm1
abline(lm1, col = 'seagreen', lwd = 3)
b_hat.lm2 <- coef(lm2); b_hat.lm2
b_hat.lm2[1]
curve(b_hat.lm2[1] + b_hat.lm2[2]*X +b_hat.lm2[3]*X^2, col="blue", add=TRUE)
curve(b_hat.lm2[1] + b_hat.lm2[2]*X, col="blue", add=TRUE)
b_hat.lm2[1]
b_hat.lm2 <- coef(lm2); b_hat.lm2
b_hat.lm3 <- coef(lm3); b_hat.lm3
curve(b3_hat.lm3[1] +b3_hat.lm3.lm3[2]*X
+b3_hat.lm3.lm3[3]*X^2 +b3_hat.lm3.lm3[4]*X^3, col="green", add=TRUE)
lm2 <- lm(Y ~ X + I(X^2))            # multiple (quadratic)
lm3 <- lm(Y ~ X + I(X^2) + I(X^3))   # multiple (cubic)
# plot the data
plot(X, Y)
# draw lm1
abline(lm1, col = 'seagreen', lwd = 3)
curve(b_hat.lm3[1] +b_hat.lm3[2]*X
+b_hat.lm3[3]*X^2 +b_hat.lm3[4]*X^3, col="green", add=TRUE)
curve(b_hat.lm3[1] + b_hat.lm3[2]*X
+ (b_hat.lm3[3]*(X^2)) + (b_hat.lm3[4]*(X^3)), col="green", add=TRUE)
dat <- read.csv2("Marketing.csv")    ## see slides 14-15
dat <- read.csv2("Dataset/Marketing.csv")    ## see slides 14-15
dat <- read.csv2("Dataset/Marketing.csv")    ## see slides 14-15
attach(dat)  ## load data into workspace
plot(x,y, pch=19, main="Marketing")
## simple linear regression
lm1 <- lm(y ~ x, data=dat)
lm1
abline(lm1, col="red")
## multiple linear regressions
lm2 <- lm(y ~ x + I(x^2), data=dat)  ## multiple (quadratic)
lm3 <- lm(y ~ x + I(x^2) + I(x^3), data=dat)  ## multiple (cubic)
lm2
lm3
## use coef to obtain the coefficients
b.lm2 <- coef(lm2); b.lm2
curve(b.lm2[1] + b.lm2[2]*x +b.lm2[3]*x^2, col="blue", add=TRUE)
b.lm3 <- coef(lm3); b.lm3
curve(b.lm3[1] +b.lm3[2]*x +b.lm3[3]*x^2 +b.lm3[4]*x^3, col="green", add=TRUE)
set.seed(123)
# init X
X <- rnorm(n, mean = 0, sd = 1)
# init e
e <- rnorm(n, mean = 0, sd = sqrt(0.25))
# calculate Y
Y <- 1 + (2*X) + (X^2) + e
length(Y)
# set three regression model
lm1 <- lm(Y ~ X)                     # Simple linear regression
lm2 <- lm(Y ~ X + I(X^2))            # multiple (quadratic)
lm3 <- lm(Y ~ X + I(X^2) + I(X^3))   # multiple (cubic)
# plot the data
plot(X, Y)
# draw lm1
abline(lm1, col = 'seagreen', lwd = 3)
b.lm2 <- coef(lm2); b.lm2
b.lm2[1]
curve(b.lm2[1] + b.lm2[2]*X, col="blue", add=TRUE)
curve(b.lm2[1] + b.lm2[2]*X + b.lm2[3]*X^2, col="blue", add=TRUE)
curve(b.lm2[1] + b.lm2[2]*x +b.lm2[3]*x^2, col="blue", add=TRUE)
# Preparations
rm(list = ls(all.names = TRUE))
# set sample size n = 500
n = 500
# set sample size n = 500
n = 500
set.seed(123)
# init X
X <- rnorm(n, mean = 0, sd = 1)
# init e
e <- rnorm(n, mean = 0, sd = sqrt(0.25))
# calculate Y
Y <- 1 + (2*X) + (X^2) + e
length(Y)
# set three regression model
lm1 <- lm(Y ~ X)                     # Simple linear regression
lm2 <- lm(Y ~ X + I(X^2))            # multiple (quadratic)
lm3 <- lm(Y ~ X + I(X^2) + I(X^3))   # multiple (cubic)
# plot the data
plot(X, Y)
# draw lm1
abline(lm1, col = 'seagreen', lwd = 3)
b.lm2 <- coef(lm2); b.lm2
b.lm2[1]
curve(b.lm2[1] + b.lm2[2]*x +b.lm2[3]*x^2, col="blue", add=TRUE)
curve(b_hat.lm2[1] + b_hat.lm2[2]*x +b_hat.lm2[3]*x^2, col="blue", add=TRUE)
curve(b_hat.lm2[1] + b_hat.lm2[2]*x +b_hat.lm2[3]*x^2, col="blue",
lowd = 3, add=TRUE)
curve(b_hat.lm2[1] + b_hat.lm2[2]*x +b_hat.lm2[3]*x^2, col="blue",
lowd = 3, add=TRUE)
b_hat.lm2 <- coef(lm2); b.lm2
b_hat.lm2[1]
curve(b_hat.lm2[1] + b_hat.lm2[2]*x +b_hat.lm2[3]*x^2, col="blue",
lowd = 3, add=TRUE)
curve(b_hat.lm2[1] + b_hat.lm2[2]*x +b_hat.lm2[3]*x^2, col="blue",
lwd = 3, add=TRUE)
curve(b_hat.lm2[1] + b_hat.lm2[2]*x +b_hat.lm2[3]*x^2, col="darkblue",
lwd = 3, add=TRUE)
b_hat2 <- coef(lm2); b_hat2
curve(b_hat2[1] + b_hat2[2]*x +b_hat2[3]*x^2, col="darkblue",
lwd = 3, add=TRUE)
# Preparations
rm(list = ls(all.names = TRUE))
# set sample size n = 500
n = 500
set.seed(123)
# init X
X <- rnorm(n, mean = 0, sd = 1)
# init e
e <- rnorm(n, mean = 0, sd = sqrt(0.25))
# calculate Y
Y <- 1 + (2*X) + (X^2) + e
# set three regression model
lm1 <- lm(Y ~ X)                     # Simple linear regression
lm2 <- lm(Y ~ X + I(X^2))            # multiple (quadratic)
lm3 <- lm(Y ~ X + I(X^2) + I(X^3))   # multiple (cubic)
# plot the data
plot(X, Y)
b_hat2 <- coef(lm2); b_hat2
curve(b_hat2[1] + b_hat2[2]*x +b_hat2[3]*x^2, col="darkblue",
lwd = 3, add=TRUE)
# draw lm1
abline(lm1, col = 'seagreen', lwd = 3)
curve(b_hat3[1] + b_hat3[2]*X + (b_hat3[3]*(X^2))
+ (b_hat3[4]*(X^3)), col="darkorange2", add=TRUE)
curve(b_hat3[1] + b_hat3[2]*x + (b_hat3[3]*(x^2))
+ (b_hat3[4]*(x^3)), col="darkorange2", add=TRUE)
b_hat3 <- coef(lm3); b_hat3
curve(b_hat3[1] + b_hat3[2]*x + (b_hat3[3]*(x^2))
+ (b_hat3[4]*(x^3)), col="darkorange2", add=TRUE)
curve(b_hat3[1] + b_hat3[2]*x + (b_hat3[3]*(x^2)) + (b_hat3[4]*(x^3)),
col="darkorange2", lwd = 3, add=TRUE)
print(summary(lm1)$deviance)
print(summary(lm2)$deviance)
print(deviance(lm1))
print(deviance(lm2))
print(deviance(lm3))
print(paste('RSS for linear regression: ', deviance(lm1)))
print(paste('RSS for quardratic regression: ', deviance(lm2)))
print(paste('RSS for cubic regression: ', deviance(lm3)))
model_summary <- (paste('RSS for linear regression: ', deviance(lm1),
'\n\nRSS for quardratic regression: ', deviance(lm2),
'\n\nRSS for cubic regression: ', deviance(lm3)))
cat(model_summary)
model_summary <- (paste('RSS for linear regression: ', deviance(lm1),
'\nRSS for quardratic regression: ', deviance(lm2),
'\nRSS for cubic regression: ', deviance(lm3)))
cat(model_summary)
model_summary <- (paste('RSS for linear regression:   ', deviance(lm1),
'\nRSS for quardratic regression: ', deviance(lm2),
'\nRSS for cubic regression:   ', deviance(lm3)))
cat(model_summary)
model_summary <- (paste('RSS for linear regression:      ', deviance(lm1),
'\nRSS for quardratic regression: ', deviance(lm2),
'\nRSS for cubic regression:      ', deviance(lm3)))
cat(model_summary)
model_summary <- (paste('RSS for linear regression:     ', deviance(lm1),
'\nRSS for quardratic regression: ', deviance(lm2),
'\nRSS for cubic regression:      ', deviance(lm3)))
cat(model_summary)
ylim <- range(c(residuals(lm1),residuals(lm2), residuals(lm3)))
## compare residuals for lm1 and lm2
par(mfrow=c(1,3))
ylim <- range(c(residuals(lm1),residuals(lm2), residuals(lm3)))
plot(x,residuals(lm1), main="Residual plot: lm1", ylim=ylim)
plot(X,residuals(lm1), main="Residual plot: lm1", ylim=ylim)
abline(h=0,col="gray")
plot(X,residuals(lm2), main="Residual plot: lm2", ylim=ylim)
abline(h=0,col="gray")
plot(X,residuals(lm3), main="Residual plot: lm2", ylim=ylim)
abline(h=0,col="gray")
par(mfrow=c(1,1))
# set sample size n = 500
n = 500
set.seed(123)
# init X
X <- rnorm(n, mean = 0, sd = 1)
# init e
e <- rnorm(n, mean = 0, sd = sqrt(0.25))
# calculate Y
Y <- 1 + (2*X) + (X^2) + e
# set three regression model
lm1 <- lm(Y ~ X)                     # Simple linear regression
lm2 <- lm(Y ~ X + I(X^2))            # multiple (quadratic)
lm3 <- lm(Y ~ X + I(X^2) + I(X^3))   # multiple (cubic)
# plot the data
plot(X, Y)
# draw lm1
abline(lm1, col = 'seagreen', lwd = 3)
b_hat2 <- coef(lm2); b_hat2
curve(b_hat2[1] + b_hat2[2]*x +b_hat2[3]*x^2,
col="darkblue",
lwd = 3, add=TRUE)
b_hat3 <- coef(lm3); b_hat3
curve(b_hat3[1] + b_hat3[2]*x + (b_hat3[3]*(x^2)) + (b_hat3[4]*(x^3)),
col="darkorange2", lwd = 3, add=TRUE)
model_summary <- (paste('RSS for linear regression:     ', deviance(lm1),
'\nRSS for quardratic regression: ', deviance(lm2),
'\nRSS for cubic regression:      ', deviance(lm3)))
cat(model_summary)
## compare residuals for lm1, lm2, and lm3
par(mfrow=c(1,3))
ylim <- range(c(residuals(lm1),residuals(lm2), residuals(lm3)))
plot(X,residuals(lm1), main="Residual plot: lm1", ylim=ylim)
abline(h=0,col="gray")
plot(X,residuals(lm2), main="Residual plot: lm2", ylim=ylim)
abline(h=0,col="gray")
plot(X,residuals(lm3), main="Residual plot: lm2", ylim=ylim)
abline(h=0,col="gray")
par(mfrow=c(1,1))
plot(X,residuals(lm3), main="Residual plot: lm3", ylim=ylim)
## compare residuals for lm1, lm2, and lm3
par(mfrow=c(1,3))
ylim <- range(c(residuals(lm1),residuals(lm2), residuals(lm3)))
plot(X,residuals(lm1), main="Residual plot: lm1", ylim=ylim)
abline(h=0,col="gray")
plot(X,residuals(lm2), main="Residual plot: lm2", ylim=ylim)
abline(h=0,col="gray")
plot(X,residuals(lm3), main="Residual plot: lm3", ylim=ylim)
abline(h=0,col="gray")
par(mfrow=c(1,1))
